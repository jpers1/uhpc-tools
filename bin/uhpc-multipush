#!/usr/bin/env bash
#
# uhpc-multipush: Stream a local file into a specified path on multiple Slurm-allocated nodes.
#
# Part of uhpc-tools ("Unusual HPC Tools").
#
# Usage:
#   uhpc-multipush <LOCAL_FILE> <REMOTE_FILE> <NODE_LIST>
#
# Where:
#   LOCAL_FILE   = Path to the local file you want to copy, e.g. /dev/shm/data_local.dat
#   REMOTE_FILE  = Desired path/name on the remote nodes, e.g. /dev/shm/data_remote.dat
#                  or a directory ending with '/', e.g. /dev/shm/
#   NODE_LIST    = Comma-separated node names, e.g. wn208,wn209
#
# Example 1:
#   # Full file path
#   uhpc-multipush /dev/shm/mydata_local.dat /dev/shm/mydata_remote.dat wn208,wn209
#
# Example 2:
#   # Directory path (ends with slash):
#   uhpc-multipush /dev/shm/mydata_local.dat /dev/shm/ wn208,wn209
#   # => it will store the file as /dev/shm/mydata_local.dat on each node
#
# Requirements:
#   - Slurm commands: srun, squeue, scontrol
#   - A valid Slurm allocation that includes each target node
#
# By default, the script checks if you have an active Slurm allocation on each node
# (via squeue). If not, it aborts.

set -o errexit
set -o nounset
# set -o xtrace  # (Optional) Debug: echo all commands

# ------------------------------------------------------------------------------
# FUNCTIONS
# ------------------------------------------------------------------------------

usage() {
  echo "Usage: $0 <LOCAL_FILE> <REMOTE_FILE> <NODE_LIST>"
  echo ""
  echo "  LOCAL_FILE   : Path to the file you want to copy (e.g. /dev/shm/data_local.dat)."
  echo "  REMOTE_FILE  : Path/name on the remote nodes (e.g. /dev/shm/data_remote.dat),"
  echo "                 or a directory path ending with '/', e.g. /dev/shm/."
  echo "  NODE_LIST    : Comma-separated node names (e.g. wn208,wn209)."
  echo ""
  echo "Example:"
  echo "  salloc --nodes=2 --nodelist=wn208,wn209 --time=1:00:00"
  echo "  $0 /dev/shm/mydata_local.dat /dev/shm/mydata_remote.dat wn208,wn209"
  exit 1
}

# Expand bracketed node ranges into one line per node
expand_bracketed_nodes() {
  local bracket_expr="$1"
  scontrol show hostname "$bracket_expr" 2>/dev/null || true
}

# Check if the current user has an active Slurm allocation on the given node.
# Return 0 if yes, 1 if no.
user_has_allocation_on_node() {
  local node="$1"
  local allocated_list

  allocated_list="$(squeue -u "$USER" --noheader -o '%N' 2>/dev/null || true)"

  [[ -z "$allocated_list" ]] && return 1

  local final_nodes=()
  while read -r node_expr; do
    while read -r expanded; do
      final_nodes+=("$expanded")
    done < <(expand_bracketed_nodes "$node_expr")
  done <<< "$allocated_list"

  for n in "${final_nodes[@]}"; do
    if [[ "$n" == "$node" ]]; then
      return 0
    fi
  done

  return 1
}

# ------------------------------------------------------------------------------
# MAIN
# ------------------------------------------------------------------------------

if [[ $# -ne 3 ]]; then
  usage
fi

LOCAL_FILE="$1"
REMOTE_FILE="$2"
NODE_LIST="$3"

# 1) Validate LOCAL_FILE
if [[ ! -f "$LOCAL_FILE" ]]; then
  echo "ERROR: Local file '$LOCAL_FILE' does not exist or is not a regular file."
  exit 1
fi

# 2) If REMOTE_FILE ends with '/', append basename of LOCAL_FILE
#    So "uhpc-multipush local.dat /dev/shm/ wn219" becomes "/dev/shm/local.dat"
if [[ "$REMOTE_FILE" =~ /$ ]]; then
  REMOTE_FILE="${REMOTE_FILE}$(basename "$LOCAL_FILE")"
fi

# 3) Split comma-separated NODE_LIST
IFS=',' read -ra NODES <<< "$NODE_LIST"

# 4) For each node, confirm user has an allocation and then push
for node in "${NODES[@]}"; do
  if user_has_allocation_on_node "$node"; then
    echo "Copying '$LOCAL_FILE' to node '$node:$REMOTE_FILE' ..."
    cat "$LOCAL_FILE" | srun --nodes=1 --ntasks=1 --nodelist="$node" \
        bash -c "cat > \"$REMOTE_FILE\""
  else
    echo "ERROR: No active Slurm allocation found on node '$node'."
    echo "       Allocate first, for example:"
    echo "         salloc --nodes=1 --nodelist=$node --time=1:00:00"
    exit 1
  fi
done

echo "Done. '$LOCAL_FILE' streamed to '$REMOTE_FILE' on nodes: ${NODES[*]}"
exit 0
